<!DOCTYPE html>
<html>

<head>
    <%- include('../partials/head'); %>

    <!-- Main Script -->
    <script type="module" defer>
        import { webSocket } from "/js/WebSocket.js";
        const playerEvents = [ // Player events that get sent to the Web Socket
            "play-server", "pause-server"
        ];
        const keyboardShortcuts = [
            {
                name: "Pause/Play",
                keyName: "Space",
                keyCode: 32,
                event: function () {
                    if (player.paused()) {
                        sendEventToServer("play");
                    } else {
                        sendEventToServer("pause");
                    }
                }
            }, {
                name: "Seek Backward",
                keyName: "Left Arrow Key",
                keyCode: 37,
                event: function () {
                    sendEventToServer("seek", -5);
                }
            }, {
                name: "Seek Forward",
                keyName: "Right Arrow Key",
                keyCode: 39,
                event: function () {
                    sendEventToServer("seek", +5);
                }
            }, {
                name: "Full Screen",
                keyName: "F",
                keyCode: 70,
                event: function () {
                    if (player.isFullscreen()) {
                        player.exitFullscreen();
                    } else {
                        player.requestFullscreen();
                    }
                }
            }, {
                name: "Mute",
                keyName: "M",
                keyCode: 77,
                event: function () {
                    player.muted(!player.muted());
                }
            }
        ];
        const channelName = "<%= channelName %>";
        const channelPassword = "<%= channelPassword %>";

        var data = {};
        var player;

        // Set as wss if it is https
        if (window.location.protocol == "https:") {
            webSocket.webSocketProtocol = "wss";
        }




        // WEBSOCKET MANAGEMENT
        // Events
        webSocket.events = [
            {
                name: 'connect',
                handler: function () {
                    updateAlert("Connected", 0);
                }
            }, {
                name: 'disconnect',
                handler: function (reason) {
                    console.log("disconnect" + reason);
                    if (!$("#div-alert").hasClass("alert-danger")) {
                        updateAlert("Disconnected!", 2);
                    }
                }
            }, {
                name: 'player',
                handler: function (data) {
                    updateAlert("Loading", 1);
                    data.timestamp -= new Date().getTime();

                    setTimeout(() => {
                        player.currentTime(data.time);

                        switch (data.event) {
                            case "play":
                                player.play();
                                break;
                            case "pause":
                                player.pause();
                                break;
                            default:
                                console.log("Defaulted with '%s'", data.event);
                        }

                        updateAlert("Ready", 0);
                    }, data.timestamp);
                }
            }, {
                name: 'handshake',
                handler: function (data) {
                    data = JSON.parse(data);

                    if (!data.valid) {
                        updateAlert(data.message, 2);
                    }
                }
            }
        ];



        // FUNCTIONS
        // Video Function
        function sendEventToServer(event, timeModifier = 0) {
            player.pause();

            data.event = event;
            data.time = player.currentTime() + timeModifier;
            webSocket.send(JSON.stringify(data));
        }

        // Alert Function
        // 0 is success, 1 is warning, 2 is danger
        function updateAlert(update, mode = 0) {
            $("#div-alert").removeClass("alert-warning");
            $("#div-alert").removeClass("alert-success");
            $("#div-alert").removeClass("alert-danger");

            var addedClass;
            var text = $("#div-alert").text();
            text = (update != "") ? update : text;

            switch (mode) {
                case 0:
                    addedClass = "alert-success";
                    break;
                case 1:
                    addedClass = "alert-warning";
                    break;
                case 2:
                    addedClass = "alert-danger";
                    break;
            }

            $("#div-alert").addClass(addedClass);
            $("#div-alert").text(text);
        }


        // DOCUMENT
        $(document).ready(function () {
            // Connect to the Web Socket
            webSocket.connect({
                name: channelName,
                pwd: channelPassword
            });

            // Get the video player
            player = videojs('video-main');

            // File Input
            $("#file-video").change(function () {
                // If user selected files
                if ($(this).get()[0].files.length != 0) {

                    // Get file
                    var file = $(this).get()[0].files[0];

                    // Create video url from file 
                    var fileUrl = URL.createObjectURL(file);

                    // Add the url as a video source and set MIME type
                    player.src([
                        { type: file.type, src: fileUrl }
                    ]);

                    // Set file input text
                    $("#lbl-video").html("Current file: " + file.name);

                    // Set file name 
                    data.filename = file.name;

                    // Focus video
                    player.focus();
                }
            });

            // Link button
            $("#btn-link").click(function () {
                navigator.clipboard.writeText(window.location.href);
            });
            $('#btn-link').popover({
                container: 'body',
                title: 'Link copied!',
                content: 'Share it with your friends c:',
                placement: 'right',
                trigger: 'focus'
            });

            // Video player
            $(document).on("click", ".vjs-text-track-display", function () {
                if (player.paused()) {
                    sendEventToServer("play");
                } else {
                    sendEventToServer("pause");
                }
            });
            $(document).on("mouseup", ".vjs-progress-control", function () {
                sendEventToServer("seek");
            });


            // Keyboard shortcuts
            keyboardShortcuts.forEach(shortcut => {
                $(document).keydown(function (event) {
                    if (event.which == shortcut.keyCode) {
                        shortcut.event();
                    }
                });
            });
        });
    </script>
</head>

<body class="text-center">

    <header>
        <%- include('../partials/header'); %>
    </header>

    <div class="container p-4">
        <div id="div-alert" class="alert alert-danger" role="alert">
            Not Connected
        </div>
        <div class="row justify-content-center video-js-responsive-container vjs-hd">
            <video id="video-main" class="video-js vjs-16-9" controls preload="none" poster="/img/no-video.png" data-setup="{}">
                <p class="vjs-no-js">
                    To view this video please enable JavaScript, and consider upgrading to a
                    web browser that
                    <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
                </p>
            </video>
        </div>
        <br>
        <div class="row justify-content-center">
            <div class="input-group">
                <div class="input-group-prepend">
                    <button id="btn-link" type="submit" class="btn btn-primary">Copy invitation link</button>
                </div>
                <div class="custom-file">
                    <input id="file-video" type="file" class="custom-file-input" accept="video/*">
                    <label id="lbl-video" class="custom-file-label" for="file-video">Choose file...</label>
                </div>
            </div>
        </div>
    </div>
</body>

</html>